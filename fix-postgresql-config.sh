#!/bin/bash

# PostgreSQL Configuration Fix Script
# Fixes invalid shared_buffers and effective_cache_size parameters

set -e

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
NC='\033[0m'

log() { echo -e "${BLUE}[$(date '+%H:%M:%S')]${NC} $1"; }
success() { echo -e "${GREEN}✓${NC} $1"; }
error() { echo -e "${RED}✗${NC} $1"; }

# Check if running as root
if [[ $EUID -ne 0 ]]; then
    error "This script must be run as root"
    exit 1
fi

log "PostgreSQL Configuration Fix Starting..."

# PostgreSQL paths
PGDATA_DIR="/var/lib/pgsql/data"
POSTGRES_CONF="$PGDATA_DIR/postgresql.conf"

# Stop PostgreSQL service
log "Stopping PostgreSQL service..."
systemctl stop postgresql 2>/dev/null || true

# Check if config file exists
if [ ! -f "$POSTGRES_CONF" ]; then
    error "PostgreSQL configuration file not found at $POSTGRES_CONF"
    exit 1
fi

# Create backup
BACKUP_FILE="$POSTGRES_CONF.backup.$(date +%Y%m%d_%H%M%S)"
log "Creating backup: $BACKUP_FILE"
cp "$POSTGRES_CONF" "$BACKUP_FILE"

# Check for invalid parameters
if grep -q "shared_buffers.*0.*8kB\|effective_cache_size.*0.*8kB" "$POSTGRES_CONF"; then
    log "Found invalid PostgreSQL configuration parameters"
    
    # Create new minimal configuration
    log "Creating new PostgreSQL configuration..."
    cat > "$POSTGRES_CONF" << 'EOF'
# PostgreSQL Configuration - Fixed for Production
# Generated by fix-postgresql-config.sh

# Connection Settings
listen_addresses = 'localhost'
port = 5432
max_connections = 100

# Memory Settings (Fixed - previously had invalid 0 8kB values)
shared_buffers = 128MB
effective_cache_size = 1GB
maintenance_work_mem = 64MB
work_mem = 4MB

# Write Ahead Log Settings
wal_buffers = 16MB
min_wal_size = 1GB
max_wal_size = 2GB
checkpoint_completion_target = 0.9

# Query Planner Settings
default_statistics_target = 100
random_page_cost = 1.1
effective_io_concurrency = 200

# Worker Process Settings
max_worker_processes = 8
max_parallel_workers_per_gather = 2
max_parallel_workers = 8
max_parallel_maintenance_workers = 2

# Logging Settings
log_destination = 'stderr'
logging_collector = on
log_directory = 'log'
log_filename = 'postgresql-%Y-%m-%d_%H%M%S.log'
log_rotation_age = 1d
log_rotation_size = 10MB
log_min_messages = warning
log_line_prefix = '%t [%p]: [%l-1] user=%u,db=%d,app=%a,client=%h '

# Other Settings
timezone = 'UTC'
datestyle = 'iso, mdy'
default_text_search_config = 'pg_catalog.english'
EOF
    
    success "New configuration created"
else
    log "No invalid parameters found in configuration"
fi

# Set proper ownership and permissions
log "Setting file permissions..."
chown postgres:postgres "$POSTGRES_CONF"
chmod 600 "$POSTGRES_CONF"

# Test configuration
log "Testing PostgreSQL configuration..."
if su - postgres -c "postgres --config-file=$POSTGRES_CONF -C shared_buffers" >/dev/null 2>&1; then
    success "Configuration test passed"
else
    error "Configuration test failed"
    # Restore backup
    log "Restoring backup configuration..."
    cp "$BACKUP_FILE" "$POSTGRES_CONF"
    chown postgres:postgres "$POSTGRES_CONF"
    chmod 600 "$POSTGRES_CONF"
    exit 1
fi

# Start PostgreSQL service
log "Starting PostgreSQL service..."
systemctl start postgresql
systemctl enable postgresql

# Wait for service to start
sleep 5

# Check service status
if systemctl is-active --quiet postgresql; then
    success "PostgreSQL service is now running"
    
    # Test database connection
    log "Testing database connection..."
    if su - postgres -c "psql -c 'SELECT version();'" >/dev/null 2>&1; then
        success "Database connection test passed"
        log "PostgreSQL version:"
        su - postgres -c "psql -c 'SELECT version();'" | head -3
    else
        error "Database connection test failed"
        exit 1
    fi
else
    error "PostgreSQL service failed to start"
    systemctl status postgresql
    exit 1
fi

success "PostgreSQL configuration fix completed successfully!"
log "Backup saved at: $BACKUP_FILE"
log "PostgreSQL is now ready for use"